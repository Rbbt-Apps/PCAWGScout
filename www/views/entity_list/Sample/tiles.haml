- require 'rbbt/statistics/fisher'
- study = list.study

- action_card = ActionCard.new do
  - input :database, :select, "Database of annotations to use in grouping genes", :none, :select_options => [:none] + Enrichment::DATABASES 

= action_card_render action_card do
  - database = :none unless defined? database and database
  - all_donors = Study.setup(list.cohort).samples

  - donors = all_donors

  - donor_genes = {}
  - donors.each do |donor|
    - if database.to_s == 'none'
      - donor_genes[donor] = Gene.setup(donor.get_genes(:affected), "Ensembl Gene ID", PCAWG.organism).name
    - else
      - donor_genes[donor] = Gene.setup(donor.get_genes(:affected), "Ensembl Gene ID", PCAWG.organism)

  - if database.to_s != "none"
    - file, options = Enrichment::REGISTRY[database]
    - identifier_file = Organism.identifiers(PCAWG.organism)
    - file = file.sub("NAMESPACE", PCAWG.organism)
    - if options[:target]
      - index = Association.index(file, options.merge(:source => options[:target], :source_format => "Ensembl Gene ID", :target => nil, :identifiers => identifier_file))
    - else
      - index = Association.index(file, options.merge(:source_format => "Ensembl Gene ID", :target => nil, :identifiers => identifier_file))

    - donor_pathways = {}
    - donor_genes.each do |donor,genes|
      - path = index.subset(genes, :all)
      - next if path.empty?
      - donor_pathways[donor] = path.collect{|i| i.partition("~").last}.uniq
    - donor_genes = donor_pathways

  - gene_pvalues = {}
  - selected_class = all_donors.collect{|d| list.include?(d) ? 1 : 0 }
  - donor_genes.values.flatten.uniq.each do |gene|
    - gene_class = all_donors.collect{|d| (donor_genes[d] && donor_genes[d].include?(gene)) ? 1 : 0 }
    - next if gene_class.select{|v| v == 1}.length < 3
    - pvalue = Fisher.test_classification(selected_class, gene_class)
    - next if pvalue > 0.1
    - gene_pvalues[gene] = pvalue

  - genes = Misc.counts(donor_genes.values.flatten).select{|g,c| c > 3}.sort_by{|g,c| -c.to_f/(gene_pvalues[g] || 1)}.collect{|g,c| g}
  - list_genes = Misc.counts(donor_genes.values_at(*list).compact.flatten).select{|g,c| c > 3}.sort_by{|g,c| -c.to_f/(gene_pvalues[g] || 1)}.collect{|g,c| g}
  - genes = list_genes + (genes - list_genes)

  - donors = []
  - genes.each do |gene|
    - donors << donor_genes.select{|s,gs| gs.include? gene}.collect{|s,g| s}

  - donors = donors.flatten.uniq
  - donors = (donors & list) + (donors - list)

  - incidence = {}

  - genes.each do |gene|
    - incidence[gene] = donors.collect do |donor|
      - donor_genes[donor].include? gene

  :sass
    #plot
      font-size: 8px
    .row
      margin-bottom: 3px
      border-bottom: 1px solid #AAA
      white-space: nowrap
      height: 2.5em
      .header
        line-height: 1.5em
        width: 10em
        display: inline-block
        vertical-align: top
    .tile
      width: 1em
      margin-left: 2px
      height: 0.5em
      display: inline-block
      vertical-align: bottom
      &[attr-mutation=true]
        background-color: red
        &[attr-fusion=true]
          background-color: blue

  #plot

  :deferjs
     
    var donors = #{donors.to_json}
    var genes = #{genes.to_json}
    var fusion_donors = #{(["false"] * (donors & list).length + ["true"] * (donors - list).length).to_json}
    var incidence = #{incidence.to_json}

    var container_obj = function(graph_model, by_type){ 
      var rows = mapArray(by_type["Gene"], function(l){ 
        var r = m('.row', l);
        return r;
      });
      return m('div.tiles', rows) 
    }

    var produce_obj = function(code,num,elems){
      var tiles = [];
      tiles.push(m('div.header', code))
      for(var i = 0; i < donors.length; i++){
        console.log(code)
        var mutation = elems.mutation[code][i]
        var fusion = fusion_donors[i]
        tiles.push(m('div.tile', {"attr-mutation": mutation, "attr-fusion": fusion}))
      }
      return tiles
    }

    var graph_model = {}
    graph_model.entities = {}
    graph_model.entities["Gene"] = {}
    graph_model.entities["Gene"].codes = genes
    graph_model.entities["Gene"].aes = {}
    graph_model.entities["Gene"].aes.mutation = incidence

    rbbt.plots.graph.view_mithril(graph_model, $('#plot'), container_obj, produce_obj)

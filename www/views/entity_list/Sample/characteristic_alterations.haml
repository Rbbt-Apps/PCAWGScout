
- require 'rbbt/statistics/fisher'
- study = list.study

- action_card = ActionCard.new do
  - input :database, :select, "Database of annotations to use in grouping genes", :none, :select_options => [:none] + Enrichment::DATABASES 

 
= action_card_render action_card do
  - database = :none if database.nil?
  - all_donors = study.donors
  - rest = study.donors - list
  - donor_genes = {}

  - if database.to_s != "none"
    - file, options = Enrichment::REGISTRY[database]
    - identifier_file = Organism.identifiers(PCAWG.organism)
    - file = file.sub("NAMESPACE", PCAWG.organism)
    - if options[:target]
      - index = Association.index(file, options.merge(:source => options[:target], :source_format => "Ensembl Gene ID", :target => nil, :identifiers => identifier_file))
    - else
      - index = Association.index(file, options.merge(:source_format => "Ensembl Gene ID", :target => nil, :identifiers => identifier_file))
    - donor_pathways = {}
    
  - all = study.knowledge_base.get_index(:sample_genes).select("affected" => 'true').keys
  - all.each do |item|
    - d, _sep, gene = item.partition "~"
    - donor_genes[d] ||= []
    - donor_genes[d] << gene

  - selected_class = all_donors.collect{|d| list.include?(d) ? 1 : 0 }


  - if database.to_s != "none"
    - donor_genes.each do |donor,genes|
      - path = index.subset(genes, :all)
      - next if path.empty?
      - donor_pathways[donor] = path.collect{|i| i.partition("~").last}.uniq

  %h3 Genes
  %dl
    - gene_pvalues = {}
    - donor_genes.values.flatten.uniq.each do |gene|
      - gene_class = all_donors.collect{|d| (donor_genes[d] && donor_genes[d].include?(gene)) ? 1 : 0 }
      - next if gene_class.select{|v| v == 1}.length < 3
      - pvalue = Fisher.test_classification(selected_class, gene_class)
      - next if pvalue > 0.1
      - gene_pvalues[gene] = pvalue

    - gene_pvalues.sort_by{|g,p| p}.each do |gene, pvalue|
      - gene = Gene.setup(gene.dup, "Ensembl Gene ID", PCAWG.organism)
      %dt= gene.link
      %dd
        %ul
          %li
            Pvalue
            = pvalue
          - ds = donor_genes.select{|d,gs| gs.include? gene}.keys
          %li
            Donors in list: 
            = (ds & list) * ", "
          %li
            Donors in not list: 
            = (ds - list) * ", "
            
  - if database.to_s != "none"
    %h3 Pathways
    %dl
      - path_pvalue = {}
      - donor_pathways.values.flatten.uniq.each do |path|
        - path_class = all_donors.collect{|d| (donor_pathways[d] && donor_pathways[d].include?(path)) ? 1 : 0 }
        - next if path_class.select{|v| v == 1}.length < 3
        - pvalue = Fisher.test_classification(selected_class, path_class)
        - next if pvalue > 0.1
        - path_pvalue[path] = pvalue

      - field= index.key_field.partition("~").last
      - path_pvalue.sort_by{|g,p| p}.each do |path, pvalue|
        - path = Misc.prepare_entity(path, field, :organism =>  PCAWG.organism)
        - name = path
        - name = path.name if path.respond_to? :name
        - name = path.link if path.respond_to? :link
        %dt= name
        %dd
          %ul
            %li
              Pvalue
              = pvalue
            - ds = donor_pathways.select{|d,ps| ps.include? path}.keys
            %li
              Donors in list: 
              = (ds & list) * ", "
            %li
              Donors in not list: 
              = (ds - list) * ", "
              

- require 'rbbt/statistics/fisher'
- study = list.study

- action_card = ActionCard.new do
  - input :use_CNV, :boolean, "Include CNV in the analysis", false
  - input :database, :select, "Database of annotations to use in grouping genes", :none, :select_options => [:none] + Enrichment::DATABASES 

= action_card_render action_card do
  - database = :none unless defined? database and database
  - use_CNV = false unless defined? use_CNV 
  - all_donors = Study.setup(list.cohort).samples

  - if database.to_s != "none"
    - log :finding_annotations, "Finding database annotations for genes in donor list"
    - file, options = Enrichment::REGISTRY[database]
    - identifier_file = Organism.identifiers(PCAWG.organism)
    - file = file.sub("NAMESPACE", PCAWG.organism)
    - options[:namespace] = PCAWG.organism
    - if options[:target]
      - index = Association.index(file, options.merge(:source => options[:target], :source_format => "Ensembl Gene ID", :target => nil, :identifiers => identifier_file, :sep2 => '|'))
    - else
      - index = Association.index(file, options.merge(:source_format => "Ensembl Gene ID", :target => nil, :identifiers => identifier_file, :sep2 => '|'))

  - donors = all_donors

  - log :finding_genes, "Finding genes for each donor"
  - donor_affected_genes = {}
  - traverse donors, "Finding affected genes" do |donor|
    - genes = donor.get_genes(:affected)
    - if database.to_s == 'none'
      - donor_affected_genes[donor] = Gene.setup(genes, "Ensembl Gene ID", PCAWG.organism).name
    - else
      - donor_affected_genes[donor] = Gene.setup(genes, "Ensembl Gene ID", PCAWG.organism)

  - donor_lost_genes = {}
  - donor_gained_genes = {}
  - if use_CNV
    - lost_gene_status = :completly_lost
    - gained_gene_status = :big_gain
    - traverse donors, "Finding #{Misc.humanize lost_gene_status, :format => :nocaps} genes" do |donor|
      - genes = donor.get_genes(lost_gene_status)
      - if database.to_s == 'none'
        - donor_lost_genes[donor] = Gene.setup(genes, "Ensembl Gene ID", PCAWG.organism).name
      - else
        - donor_lost_genes[donor] = Gene.setup(genes, "Ensembl Gene ID", PCAWG.organism)


    - traverse donors, "Finding #{Misc.humanize gained_gene_status, :format => :nocaps} genes" do |donor|
      - genes = donor.get_genes(gained_gene_status)
      - if database.to_s == 'none'
        - donor_gained_genes[donor] = Gene.setup(genes, "Ensembl Gene ID", PCAWG.organism).name
      - else
        - donor_gained_genes[donor] = Gene.setup(genes, "Ensembl Gene ID", PCAWG.organism)

  - donor_genes = {}
  - donors.each do |donor|
    - lists = [donor_affected_genes[donor], donor_lost_genes[donor], donor_gained_genes[donor]].compact
    - genes = lists.first.annotate lists.flatten.uniq
    - donor_genes[donor] = genes


  - if database.to_s != "none"
    - donor_pathways = {}
    - donor_genes.each do |donor,genes|
      - path = index.subset(genes, :all)
      - next if path.empty?
      - target_entity = index.key_field.split("~").last
      - donor_pathways[donor] = Misc.prepare_entity(path.collect{|i| i.partition("~").last}.uniq, target_entity, :organism => index.namespace)
    - donor_genes = donor_pathways

  - gene_pvalues = {}
  - selected_class_index = all_donors.collect{|d| list.include?(d) ? 1 : 0 }

  - log :classify, "Classifying donor by gene status and calculating p-values"

  - gene_incidence = database.to_s == "none" ? Misc.counts(donors.collect{|donor| donor_affected_genes[donor]}.flatten) : Misc.counts(donors.collect{|donor| donor_genes[donor]}.flatten)
  - genes_considered = gene_incidence.select{|g,count| (count > 2) and ((count > list.length.to_f / 100) or (count > donors.length.to_f / 20)) }.collect{|gene,c| gene }
  - genes_considered = genes_considered - ["TTN"]
  - traverse genes_considered, "Classifying donor by gene status and calculating p-values" do |gene|
    - gene_class = all_donors.collect{|d| (donor_genes[d] && donor_genes[d].include?(gene)) ? 1 : 0 }
    - pvalue = Fisher.test_classification(selected_class_index, gene_class)
    - next if pvalue > 0.1
    - gene_pvalues[gene] = pvalue

  - genes = Misc.counts(donor_genes.values.flatten & gene_pvalues.keys).select{|g,c| c > 3}.sort_by{|g,c| -c.to_f/(gene_pvalues[g] || 1)}.collect{|g,c| g}
  - list_genes = Misc.counts(donor_genes.values_at(*list).compact.flatten).select{|g,c| c > 3}.sort_by{|g,c| -c.to_f/(gene_pvalues[g] || 1)}.collect{|g,c| g}
  - genes = list_genes + (genes - list_genes) 
  - genes = genes & genes_considered
  - genes = genes
  - donor_genes.values.first.annotate(genes) if donor_genes.values.first.respond_to?(:annotate)

  - donors = []
  - genes.each do |gene|
    - donors << donor_genes.select{|s,gs| gs.include? gene}.collect{|s,g| s}

  - donors = donors.flatten.uniq
  - rest = all_donors - list
  - donors = (donors & list) + (list - donors) + (donors & rest) + (rest - donors)

  - incidence_affected = {}
  - log :incidence, "Finding gene incidence"
  - traverse genes, "Incidence for affected genes" do |gene|
    - incidence_affected[gene] = donors.collect do |donor|
      - if database != "none"
        - donor_genes[donor] && donor_genes[donor].include?(gene)
      - elsif donor_affected_genes.include?(donor) 
        - donor_affected_genes[donor].include? gene
      - else
        - false

  - incidence_lost = {}
  - traverse genes, "Incidence for lost genes" do |gene|
    - incidence_lost[gene] = donors.collect do |donor|
      - if donor_lost_genes.include?(donor) 
        - donor_lost_genes[donor].include? gene
      - else
        - false

  - incidence_gained = {}
  - traverse genes, "Incidence for gained genes" do |gene|
    - incidence_gained[gene] = donors.collect do |donor|
      - if donor_gained_genes.include?(donor) 
        - donor_gained_genes[donor].include? gene
      - else
        - false

  :sass
    $header_size: 6em
    $tile_margin: 1.5px
    $tile_width: calc(#{100.0/donors.length}% - (1.5px + 6em/#{donors.length}))
    $border_size: $tile_margin
    #tile_plot
      padding: 1em
      background: white
      .donors
        .donor
          width: $tile_width
          margin-left: $tile_margin
          height: 1em
          display: inline-block
          vertical-align: bottom
      .row
        margin-bottom: 3px
        white-space: nowrap
        height: 2.5em
        .header
          line-height: 1.5em
          width: $header_size
          display: inline-block
          vertical-align: top
      .tile
        width: $tile_width
        margin-left: $tile_margin
        margin-bottom: -0.5em
        //margin-bottom: 0.4em
        height: 0.5em
        display: inline-block
        vertical-align: bottom
        background: #DDD
        &[attr-mutation=true]
          background-color: red
          &[attr-in_list=false]
            background-color: red
        &[attr-lost=true]
          border: $border_size solid green
        &[attr-gained=true]
          border: $border_size solid yellow
            background-color: red

  #tile_plot

  :deferjs
     
    var donors = #{donors.to_json}
    var genes = #{genes.to_json}
    var gene_pvalues = #{gene_pvalues.to_json}
    var link = #{genes.respond_to?(:link) ? genes.link.to_json : genes.to_json}
    var in_list_donors = #{(["true"] * (donors & list).length + ["false"] * (donors - list).length).to_json}
    var incidence_affected = #{incidence_affected.to_json}
    var incidence_lost = #{incidence_lost.to_json}
    var incidence_gained = #{incidence_gained.to_json}

    var container_obj = function(graph_model, by_type){ 
      var rows = mapArray(by_type["Gene"], function(l){ 
        var r = m('.row', l);
        return r;
      });
      var donors = [m('.header')]
      for (var i=0; i < in_list_donors.length; i++){
        var in_list = in_list_donors[i]
        if (in_list == "true"){
          donors.push(m('.donor', {style: 'background-color: blue'}))
        }else{
          donors.push(m('.donor', {style: 'background-color: red'}))
        }
      }
      var donor_headers = m('div.row.donors', donors) 
      var rows = m('div.rows', rows) 
      return m('div.tiles', [donor_headers, rows])
    }

    var produce_obj = function(code,num,aes){
      var tiles = [];
      var pvalue = parseFloat(aes.pvalues[code])
      var stars = ''
      if (pvalue < 0.05) stars = ' *'
      if (pvalue < 0.01) stars = ' **'
      if (pvalue < 0.001) stars = ' ***'
      if (pvalue < 0.0001) stars = ' ****'
      var content = m.trust(aes.link[num] + stars)
      tiles.push(m('div.header', {title: pvalue.toString()}, content))
      for(var i = 0; i < donors.length; i++){
        var mutation = aes.mutation[code][i]
        var gained = aes.gained[code][i]
        var lost = aes.lost[code][i]
        var in_list = in_list_donors[i]
        tiles.push(m('div.tile', {"title": donors[i] , "attr-mutation": mutation,"attr-lost": lost,"attr-gained": gained, "attr-in_list": in_list}))
      }
      return tiles
    }

    var graph_model = {}
    graph_model.entities = {}
    graph_model.entities["Gene"] = {}
    graph_model.entities["Gene"].codes = genes
    graph_model.entities["Gene"].aes = {}
    graph_model.entities["Gene"].aes.mutation = incidence_affected
    graph_model.entities["Gene"].aes.lost = incidence_lost
    graph_model.entities["Gene"].aes.gained = incidence_gained
    graph_model.entities["Gene"].aes.pvalues = gene_pvalues
    graph_model.entities["Gene"].aes.link = mapArray(link, function(l,i){ return rbbt.link_add_script_name(l)})

    graph_model.rules = []

    rbbt.plots.graph.view_mithril(graph_model, $('#tile_plot'), container_obj, produce_obj)

%h1 
  PCAWGScout
%h3 
  Pan-cancer analysis of whole genomes

:markdown

  This web-site offers ways to explore the data produced by the PCAWG project.
  The content presented is generated from templates and organized around
  entities (e.g. a gene) and entity lists (e.g. a list of genes). Each entity
  or list of entities has an associated template showing a basic description
  and optionally some additional templates offering extended analysis. 

  All the information presented here is computed from the basic data on-demand
  (with caching mechanisms) which allows limitless exploration. In addition to
  exploration and visualization it also offers access to some of the
  intermediate results for entities such as samples (i.e. donors) and studies
  (i.e. cohorts).  Furthermore, it offers web-server access points to reproduce
  the same analysis on other datasets; please consult the [documentation](/help)

  Since the genomic mutations are considered sensible data (even when somatic)
  they will not be shown; everything else is shown, including protein mutations
  derived from the genomic mutations. Genomic mutations are thus not hosted in
  this server but on a remote servers in the intranet.

  Since the analyses presented in this web-site are computed on-demand
  availability is not garanteed for the time being. Please consider installing
  your own instance for more reliability following the [documentation](/help)
  which covers several deployment alternatives, as well as instructions to
  enhance it with further functionalities. 

%h3 Select a study
= partial_render('/main/pie')

%h3 Select a donor
= partial_render('/main/study_statistics')

-#
  %h3 Build a custom cohort

  - action_card = ActionCard.new do 
    - input :histology_abbreviation, :select, "Donor code", nil, :select_options => ["Ignore"] + PCAWG.all_abbreviations
    - input :histology_tier1, :select, "Donor code", nil, :select_options => ["Ignore"] + PCAWG.all_histologies(1).sort
    - input :histology_tier2, :select, "Donor code", nil, :select_options => ["Ignore"] + PCAWG.all_histologies(2).sort
    - input :histology_tier3, :select, "Donor code", nil, :select_options => ["Ignore"] + PCAWG.all_histologies(3).sort
    - input :histology_tier4, :select, "Donor code", nil, :select_options => ["Ignore"] + PCAWG.all_histologies(4).sort

  - action_card.require :histology_abbreviation, :histology_tier1, :histology_tier2, :histology_tier3, :histology_tier4
  = action_card_render action_card do
    - his_vals = {:histology_abbreviation => histology_abbreviation,:histology_tier1 => histology_tier1,:histology_tier2 => histology_tier2,:histology_tier3 => histology_tier3,:histology_tier4 => histology_tier4 }
    - not_ignored = his_vals.select{|k,v| v != "Ignore"}
    - if not_ignored.length == 0 
      - raise ParameterException, "Choose an subset"
    - if not_ignored.length > 1 
      - raise ParameterException, "Choose only one subset"
    - selected_key, selected_value = not_ignored.first
    - study = [selected_key, selected_value] * "="

    - if defined? study and study
      - Study.setup(study)

      
      %h3
        Click to open report
        = study.link

    -#
      = fragment do
        :sass
          #plot
            margin: 1em
            height: 800px
            width: 100%
            border: solid black 1px
          .gene
            color: green

        #plot
          .window

        :ruby
          graph = {
            :namespace => "Hsa/feb2014",
            :entities => {}, 
            :associations => {}, 
            :rules => [],
            :aes_rules => [],
            :edge_rules => [],
            :edge_aes_rules => [],
          }

          recurrent_genes = study.recurrent_genes(:recurrent_threshold => 0.1)
          
          graph[:entities]["Donor"] = {:codes => study.donors}
          graph[:entities]["Gene"] = {:codes => recurrent_genes}

          graph[:rules].push(:property => :name, :entity_type => "Gene")
          graph[:rules].push(:property => :chromosome, :entity_type => "Gene")

          graph[:aes_rules].push(:aes => :label, :name => :code)
          graph[:aes_rules].push(:aes => :label, :name => :name, :entity_type => "Gene")
          graph[:aes_rules].push(:aes => :color, :value => 'red', :entity_type => "Gene")

          associations = []
          study.sample_genes.select(:broken => "true").through("Sample", ["Ensembl Gene ID"]){|s,vs| d = PCAWG.sample_donor(s); vs.flatten.each{|g| associations << [d,g] * "~" if recurrent_genes.include?(g) }}
          graph[:associations]["sample_genes"] = {:codes => associations}

        :deferjs

          var gm = #{graph.to_json}
          rbbt.plots.graph.view_cytoscapejs(gm, $('#plot'))



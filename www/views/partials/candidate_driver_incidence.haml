- donor_mis = {}
- donor_CNV = {}
- ensg2name = Organism.identifiers(PCAWG.organism).index :target => "Associated Gene Name", :persist => true

- study_donors =  study.donors
- study_donors = donors if defined? donors

- Misc.bootstrap study_donors do |donor|
  - donor = Sample.setup(donor)
  - donor.affected_genes
  - donor.all_mi

- study_donors.each do |donor|
  - donor_mis[donor] = {}
  - donor_mis[donor][:CDS] = donor.affected_genes
  - donor_mis[donor][:UTR3] = Transcript.setup(donor.all_mi.select{|mi| mi =~ /UTR3/}.collect{|mi| mi.split(":").first}.uniq, "Ensembl Transcript ID", PCAWG.organism).gene.uniq
  - donor_mis[donor][:UTR5] = Transcript.setup(donor.all_mi.select{|mi| mi =~ /UTR5/}.collect{|mi| mi.split(":").first}.uniq, "Ensembl Transcript ID", PCAWG.organism).gene.uniq
  - donor_mis[donor][:Promoter] = (donor.get_genes_extra("gc19_pc.promCore.bed") + donor.get_genes_extra("gc19_pc.promDomain.bed")).uniq

- driver_samples_CDS = {}
- driver_samples_3UTR = {}
- driver_samples_5UTR = {}
- driver_samples_Promoter = {}
- driver_samples_lost = {}
- driver_samples_gain = {}

- all_drivers = donor_mis.values.collect{|i| i.values}.flatten.uniq.compact

- study.candidate_drivers("CDS").each do |gene|
  - donors = study_donors.select{|d| donor_mis[d][:CDS].include? gene }
  - name = ensg2name[gene]
  - driver_samples_CDS[name] = donors

- study.candidate_drivers("3UTR").each do |gene|
  - donors = study_donors.select{|d| donor_mis[d][:UTR3].include? gene }
  - next if donors.empty?
  - name = ensg2name[gene]
  - driver_samples_3UTR[name] = donors

- study.candidate_drivers("5UTR").each do |gene|
  - donors = study_donors.select{|d| donor_mis[d][:UTR5].include? gene }
  - next if donors.empty?
  - name = ensg2name[gene]
  - driver_samples_5UTR[name] = donors

- study.candidate_drivers("Promoter").each do |gene|
  - donors = study_donors.select{|d| donor_mis[d][:Promoter].include? gene }
  - next if donors.empty?
  - name = ensg2name[gene]
  - driver_samples_Promoter[name] = donors

-# all_drivers.each do |gene|
  - donors = study_donors.select{|d| donor_CNV[d][:lost].include? gene }
  - next if donors.empty?
  - name = ensg2name[gene]
  - driver_samples_lost[name] = donors

-# all_drivers.each do |gene|
  - donors = study_donors.select{|d| donor_CNV[d][:gain].include? gene }
  - next if donors.empty?
  - name = ensg2name[gene]
  - driver_samples_gain[name] = donors


- driver_samples = {:CDS => driver_samples_CDS, :UTR3 => driver_samples_3UTR, :UTR5 => driver_samples_5UTR, :Promoter => driver_samples_Promoter}
- all_genes = driver_samples.collect{|t,i| i.keys}.flatten.uniq.sort_by{|g| driver_samples.values.collect{|v| v[g]}.flatten.compact.uniq.length}.reverse 
- all_genes = all_genes.select{|g| driver_samples.collect{|t,i| i[g] }.flatten.uniq.length > 2 }
-# driver_samples[:Lost] = driver_samples_lost
-# driver_samples[:Gain] = driver_samples_gain

- plot_data = []
- driver_samples.each do |type, info|
  - p = []
  - all_genes.each do |g|
    - d = info[g] || []
    - p << {_x: all_genes.index(g) + 1, y: d.length, x: g}
  - plot_data << {:key => type, :values => p}
  
- extra = all_genes.length > 15 ? 'graph.reduceXTicks(true)' : ''
= tool :nvd3, :plot => 'multibar', :plot_data => plot_data, :height => '15em', :width => '100%', :y_label => 'Number of donors', :extra => extra



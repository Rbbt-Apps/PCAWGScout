- list = card.list
- list_id = card.list_id
:sass
  .entity_list_card 
    .card_sidebar
      min-width: 300px
      transition: margin-left 0.5s, margin-right 0.5s, max-height 0.5s, min-width 1s
      & + .column
        transition: width 0.5s, max-width 0.5s
        max-width: calc(100% - 300px)
      &.hidden
        overflow: hidden
        margin-left: calc(-25% - 32px) !important
        margin-right: 32px !important
        min-width: 25% !important
        max-height: 500px
      &.hidden + .column
        //min-width: 100% !important
        transition: width 1s, max-width 1s
        max-width: 100% !important
        width: 100% !important
        margin: 0px
      .sub.item
        margin-left: 2em

    .card_actions
      width: 100% !important
        
:deferjs
  register_dom_update('.entity_card > .content > .card_sidebar > .item.close', function(link){
    var link = $(link)
    link.click(function(){
      $(this).parent('.card_sidebar').addClass('hidden')
      return false
    })
  })

  register_dom_update('.card_sidebar_open', function(link){
    var link = $(link)
    link.click(function(){
      $(this).parents('.entity_list_card').first().find('.card_sidebar').toggleClass('hidden')
      return false
    })
  })

  register_dom_update('.card_sidebar > .item', function(link){
    link.click(function(){
      $(this).parents('.entity_list_card').first().find('.card_sidebar').addClass('hidden')
    })
  })
      
.entity_list_card.ui.grid(id="#{ list_id.gsub(/\s/,'_') }_card" data-list=list_id data-list-type="#{list.base_type}")
  .ui.four.wide.column.vertical.card_sidebar.menu.hidden
    - if card.sections.any?
      %h3 Sections
      - card.sections.each do |name,section|
        %a.item(href="##{Misc.snake_case(name)}")= Misc.humanize(name)

    .list_management.ui.small.buttons.flex-wrap
      %a.compare_list.ui.button(href="#" data-reveal-id='modal1') Compare
      %a.list_list.ui.button(href="#{request.path_info + "?_format=list"}") List

      - if list.respond_to? :name
        %a.name_list.ui.button(href="#{request.path_info + "?_format=name"}") As Name

      - if list.respond_to? :ensembl
        %a.ensembl_list.ui.button(href="#{request.path_info + "?_format=ensembl"}") As Ensembl

      %a.download_list.ui.button(href="#{request.path_info + "?_format=raw"}") Raw
      %a.edit_list.ui.button(href="#") Edit

    - info = card.list.info
    - if info.any? or card.meta or card.list_container
      /-- sidebar --
      %h3 Meta data
      .meta
        - if info.any?
          .entity_info
            = hash2dl(info)

        - case card.meta
        - when nil
        - when Hash
          = hash2dl(card.meta)
        - when Proc
          = fragment :meta, &card.meta

    .entities
      %h3 Entities
      %p #{list.length} entities
      - if (defined? force and force) or list.length < 500
        %ul.entity_list.clean_list
          - list = list.sort_by{|g| g.name || "Z" << g} if list.respond_to? :name
          - list.link.each do |link|
            %li= link
      - else
        %p
          = reveal "Too many entities to list (#{list.length})" do
            = fragment do
              - list = list.sort_by{|g| g.name || "Z" << g} if list.respond_to? :name
              %ul.entity_list.clean_list
                - list.link.each do |link|
                  %li= link
 
    - if card.list_container
      %h3 Related lists
      .list_container
        = list_container_render(card.list_container)

  .ui.twelve.wide.column.content
    .ui.header.basic.segment
      .content
        %h1.name
          = Misc.humanize list_id
        %p.type
          = list.base_type
          List

    .ui.basic.segment.controls.buttons
      .ui.icon.button.card_sidebar_open
        %i.bars.icon

    .ui.basic.segment(id='description')
      /-- content --
      - case card.description
      - when nil
        - if entity.respond_to?(:description) and entity.description
          /-- description --
          .description.ui.very.basic.segment<
            %p= entity.description
      - when String
        /-- description --
        .description.ui.very.basic.segment<
          :documentation
            #{card.description}
      - when Proc
        /-- description --
        .description.ui.very.basic.segment<
          = fragment :description, &card.description

      - if defined? block and block
        /-- description block --
        .description.ui.basic.segment<
          = capture_haml &block

      - card.sections.each do |name,section_block|
        .ui.very.basic.segment(id="#{Misc.snake_case(name)}")
          %h3.header
            = Misc.humanize(name)
          .content
            = fragment name, &section_block

    - if card.action_controller
      /-- actions --
      = action_controller_render(card.action_controller)

// LIIIIIIIIIII
-#.entity_list_card.ui.very.basic.segment(id="#{ list_id.gsub(/\s/,'_') }_card" data-list=list_id data-list-type="#{list.base_type}")

  /-- title --
  .title.ui.header
    .name
      = list.base_type
      List
    .long_name
      = Misc.humanize list_id

  .content

    /-- sidebar --
    .ui.segment.info
      .meta
        .list_management.ui.small.buttons.flex-wrap
          %a.compare_list.ui.button(href="#" data-reveal-id='modal1') Compare
          %a.list_list.ui.button(href="#{request.path_info + "?_format=list"}") List

          - if list.respond_to? :name
            %a.name_list.ui.button(href="#{request.path_info + "?_format=name"}") As Name

          - if list.respond_to? :ensembl
            %a.ensembl_list.ui.button(href="#{request.path_info + "?_format=ensembl"}") As Ensembl

          %a.download_list.ui.button(href="#{request.path_info + "?_format=raw"}") Raw
          %a.edit_list.ui.button(href="#") Edit

        .entity_info
          - info = list.info.dup
          - info.delete :annotated_array
          - info.delete :annotation_types
          = hash2dl(info)
        - case card.meta
        - when nil
        - when Hash
          = hash2dl(card.meta)
        - when Proc
          = capture_haml &card.meta 

        .entities
          %p #{list.length} entities
          - if (defined? force and force) or list.length < 500
            %ul.entity_list.clean_list
              - list = list.sort_by{|g| g.name || "Z" << g} if list.respond_to? :name
              - list.link.each do |link|
                %li= link
          - else
            %p
              = reveal "Too many entities to list (#{list.length})" do
                = fragment do
                  - list = list.sort_by{|g| g.name || "Z" << g} if list.respond_to? :name
                  %ul.entity_list.clean_list
                    - list.link.each do |link|
                      %li= link
 
        - if card.list_container
          .entity_lists
            = list_container_render(card.list_container)



    /-- description --
    .description.ui.basic.segment<
      - case card.description
      - when nil
        - if list.length == list.uniq.length
          %p== #{ list.length } elements
        - else
          %p== #{ list.length } elements (#{list.uniq.length} unique)
      - when String
        %p= card.description
      - when Proc
        = capture_haml &card.description

    - if card.action_controller
      /-- actions --
      = action_controller_render(card.action_controller)
      

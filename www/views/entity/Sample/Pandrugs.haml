- donor = sample = entity

- action_card = ActionCard.new 
- action_card.description do

  :markdown

    This results are derived from the [Pandrugs
    database](http://pandrugs.bioinfo.cnio.es/).  Please consult their website
    for more documentation.  They have been precomputed using the original VCF
    files provided by PCAWG. 

    The associations presented here can be for drugs approved by the FDA, in
    clinical trials, and experimental. For direct drug-targer relationships or
    for markers of sensitivity and resistance, and for direct gene matches or
    for matches in up or down-stream. 

    The associations here come from curated databases and from experimental
    resources. The evidence is weight by a internal scoring system to rank it
    for relevance. Currently these analysis does not consider CNVs, but a new
    version is in process.

    The information in this table is *strictly orientative*. Please check the
    details presented for each drug that qualify these associations (e.g.
    particular mutations) to asses if the recomendations are actually
    applicable.

= action_card_render action_card do
  - donor_drivers = PCAWG.donor_drivers.tsv(:merge => true, :persist => true)
  - driver_genes = donor_drivers.include?(donor) ? donor_drivers[donor]["Associated Gene Name"] : []

  - PCAWG.pandrugs.produce

  - assoc_fields = %w(affected_gene gscore alteration target_marker resistance relation gene_symbol source)
  - associations = PCAWG.pandrugs[sample].tsv :type => :double, :merge => true, :sep2 => '--NONE--', :key_field => 'show_drug_name', :fields => assoc_fields

  - log :compile, "Compiling drug evidence"
  - mis = MutatedIsoform.setup(donor.mi(:principal => true), PCAWG.organism)
  - gene_mi = {}
  - mis.each do |mi|
    - gene = mi.protein.gene
    - gene_mi[gene] ||= []
    - gene_mi[gene] << mi
  - associations.add_field "Mutated Isoform" do |drug, values|
    - Gene.setup(values["affected_gene"], "Associated Gene Name", PCAWG.organism).ensembl.collect do |gene|
      - (gene_mi[gene] || []).first

  - info_fields = %w(score status pathology cancer extra extra2)
  - drug_info = PCAWG.pandrugs[sample].tsv :type => :double, :merge => true, :sep2 => '--NONE--', :key_field => 'show_drug_name', :fields => info_fields

  - drug_info.add_field "Approved for oncology" do |k, values|
    - status, pathology, cancer, extra, extra2 = values.values_at(:status, :pathology, :cancer, :extra, :extra2).collect{|v| v.first || "" }
    - [status == "Approved" && pathology.include?("Oncology")].collect{|v| v.to_s}

  - good_keywords = PCAWG.pandrugs2abbr.tsv.select{|k,v| v.include? donor.abbr}.keys
  - drug_info.add_field "Approved for this tumor" do |k, values|
    - extra = values["extra"] * " | "
    - extra2 = values["extra2"] * " | "
    - if values["Approved for oncology"].first == "true"
      - [good_keywords.select{|k| extra.include?(k) || extra2.include?(k) }.any?].collect{|v| v.to_s}
    - else
      - ["false"]

  - drug_info.add_field "Clinical trials" do |k, values|
    - [values["status"].first == 'Clinical trials'].collect{|v| v.to_s}

  - drug_info.add_field "Clinical trials for cancer" do |k, values|
    - [values["status"].first == 'Clinical trials' && (values["cancer"].first || "").include?("cancer") || values["status"].first == "Approved" && (values["cancer"].first || "").include?("clinical cancer")].collect{|v| v.to_s}

  - good_score = drug_info.select("score"){|s| s.uniq.first.to_f.abs > 0.2}

  -require 'rbbt/rest/common/tabs'
  - log :display, "Displaying drug evidence"
  = tabs do |t|
    - if good_score.select("Approved for this tumor" => 'true').keys.any?
      - t.active "Approv. this tumor"
    - elsif
      - t.active "Approv. other tumors"

    - t.add "Approv. this tumor" do
      - selection = good_score.select("Approved for this tumor" => 'true')
      - if selection.keys.any?
        - selection.sort_by{|d,v| -v["score"].uniq.first.to_f.abs}.each do |drug, info|
          = partial_render('partials/pandrug_entry', :drug => drug, :info => info, :associations => associations)
      - else
        None

    - t.add "Approv. other tumors" do
      - selection = good_score.select("Approved for oncology" => 'true').select("Approved for this tumor" => 'false')
      - if selection.keys.any?
        - selection.sort_by{|d,v| -v["score"].uniq.first.to_f.abs}.each do |drug, info|
          = partial_render('partials/pandrug_entry', :drug => drug, :info => info, :associations => associations)
      - else
        None

    - t.add "Clin. trials cancer" do
      - selection = good_score.select("Clinical trials for cancer" => 'true').select("Approved for oncology" => 'false')
      - if selection.keys.any?
        - selection.sort_by{|d,v| -v["score"].uniq.first.to_f.abs}.each do |drug, info|
          = partial_render('partials/pandrug_entry', :drug => drug, :info => info, :associations => associations)
      - else
        None

    - t.add "Approv. other patho." do
      - selection = good_score.select("Clinical trials for cancer" => 'false').select("Approved for oncology" => 'false').select("status" => 'Approved')
      - if selection.keys.any?
        - selection.sort_by{|d,v| -v["score"].uniq.first.to_f.abs}.each do |drug, info|
          = partial_render('partials/pandrug_entry', :drug => drug, :info => info, :associations => associations)
      - else
        None

    - t.add "All" do
      - selection = good_score
      - if selection.keys.any?
        - selection.sort_by{|d,v| -v["score"].uniq.first.to_f.abs}.each do |drug, info|
          = partial_render('partials/pandrug_entry', :drug => drug, :info => info, :associations => associations)
      - else
        None


  = resource "Complete #{donor} Pandrugs result.tsv", nil, :link do |filename|
    - Open.write(filename, PCAWG.pandrugs[donor].read)


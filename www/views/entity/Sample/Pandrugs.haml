- donor = sample = entity

- action_card = ActionCard.new 
- action_card.description do

  :markdown

    This results are derived from the [Pandrugs
    database](http://pandrugs.bioinfo.cnio.es/).  Please consult their website
    for more documentation.  They have been precomputed using the original VCF
    files provided by PCAWG. 

    The associations presented here can be for drugs approved by the FDA, in
    clinical trials, and experimental. For direct drug-targer relationships or
    for markers of sensitivity and resistance, and for direct gene matches or
    for matches in up or down-stream. 

    The associations here come from curated databases and from experimental
    resources. The evidence is weight by a internal scoring system to rank it
    for relevance.  The table shows only recomendations with gene and drug
    scores above 0.5 in absolute value. Use the link below to retrieve the
    complete result.

    Currently these analysis does not consider CNVs, but a new version is in
    process.

    The table only shows results with Dscore over 0.5 and a Gscore of over 0.5
    (both in absolute value) or involving a gene predicted driver.

    The information in this table is *strictly orientative*. Please check the
    details presented for each drug that qualify these associations (e.g.
    particular mutations) to asses if the recomendations are actually
    applicable.

= action_card_render action_card do
  - donor_drivers = PCAWG.donor_drivers.tsv(:merge => true, :persist => true)
  - driver_genes = donor_drivers.include?(donor) ? donor_drivers[donor]["Associated Gene Name"] : []

  - PCAWG.pandrugs.produce

  - assoc_fields = %w(affected_gene gscore alteration target_marker resistance relation gene_symbol source)
  - associations = PCAWG.pandrugs[sample].tsv :type => :double, :merge => true, :sep2 => '--NONE--', :key_field => 'show_drug_name', :fields => assoc_fields

  - mis = MutatedIsoform.setup(donor.mi(:principal => true), PCAWG.organism)
  - associations.add_field "Mutated Isoform" do |drug, values|
    - gene = Gene.setup(values["affected_gene"].first, "Associated Gene Name", PCAWG.organism).ensembl
    - [mis.select{|mi| mi.protein.gene == gene}.first]

  - info_fields = %w(score status pathology cancer extra extra2)
  - drug_info = PCAWG.pandrugs[sample].tsv :type => :double, :merge => true, :sep2 => '--NONE--', :key_field => 'show_drug_name', :fields => info_fields

  - drug_info.add_field "Approved for oncology" do |k, values|
    - status, pathology, cancer, extra, extra2 = values.values_at(:status, :pathology, :cancer, :extra, :extra2).collect{|v| v.first || "" }
    - [status == "Approved" && pathology.include?("Oncology")].collect{|v| v.to_s}

  - good_keywords = PCAWG.abbr2pandrugs.tsv[donor.abbr].flatten
  - drug_info.add_field "Approved for this tumor" do |k, values|
    - extra = values["extra"] * " | "
    - extra2 = values["extra2"] * " | "
    - if values["Approved for oncology"].first == "true"
      - [good_keywords.select{|k| extra.include?(k) || extra2.include?(k) }.any?].collect{|v| v.to_s}
    - else
      - ["false"]

  - drug_info.add_field "Clinical trials" do |k, values|
    - [values["status"].first == 'Clinical trials'].collect{|v| v.to_s}

  - drug_info.add_field "Clinical trials for cancer" do |k, values|
    - [values["status"].first == 'Clinical trials' && (values["cancer"].first || "").include?("cancer") || values["status"].first == "Approved" && (values["cancer"].first || "").include?("clinical cancer")].collect{|v| v.to_s}

  - good_score = drug_info.select("score"){|s| s.uniq.first.to_f.abs > 0.5}

  -require 'rbbt/rest/common/tabs'
  = tabs do |t|
    - if good_score.select("Approved for this tumor" => 'true').keys.any?
      - t.active "Approved for this tumor"
    - elsif
      - t.active "Approved for other tumors"

    - t.add "Approved for this tumor" do
      - selection = good_score.select("Approved for this tumor" => 'true')
      - if selection.keys.any?
        - selection.sort_by{|d,v| -v["score"].uniq.first.to_f.abs}.each do |drug, info|
          = partial_render('partials/pandrug_entry', :drug => drug, :info => info, :associations => associations)
      - else
        None

    - t.add "Approved for other tumors" do
      - selection = good_score.select("Approved for oncology" => 'true').select("Approved for this tumor" => 'false')
      - if selection.keys.any?
        - selection.sort_by{|d,v| -v["score"].uniq.first.to_f.abs}.each do |drug, info|
          = partial_render('partials/pandrug_entry', :drug => drug, :info => info, :associations => associations)
      - else
        None

    - t.add "Clinical trials for cancer" do
      - selection = good_score.select("Clinical trials for cancer" => 'true').select("Approved for oncology" => 'false')
      - if selection.keys.any?
        - selection.sort_by{|d,v| -v["score"].uniq.first.to_f.abs}.each do |drug, info|
          = partial_render('partials/pandrug_entry', :drug => drug, :info => info, :associations => associations)
      - else
        None

    - t.add "Approved for other pathologies" do
      - selection = good_score.select("Clinical trials for cancer" => 'false').select("Approved for oncology" => 'false').select("status" => 'Approved')
      - Log.tsv selection
      - if selection.keys.any?
        - selection.sort_by{|d,v| -v["score"].uniq.first.to_f.abs}.each do |drug, info|
          = partial_render('partials/pandrug_entry', :drug => drug, :info => info, :associations => associations)
      - else
        None

    - t.add "All" do
      - selection = good_score
      - if selection.keys.any?
        - selection.sort_by{|d,v| -v["score"].uniq.first.to_f.abs}.each do |drug, info|
          = partial_render('partials/pandrug_entry', :drug => drug, :info => info, :associations => associations)
      - else
        None




- study = entity

- entity_card = EntityCard.new(study)
- entity_card.name = study
- entity_card.long_name = ""

- entity_card.meta do
  %h1 Meta

- entity_card.add_section "Overview" do
  .ui.stackable.three.column.grid
    .column
      .ui.header
        Donors
      
      .ui.content
        %dl
          %dt Registered donors 
          %dd= study.donors.list_link :length, "Donors in #{ study }"

          - if study.respond_to?(:has_genotypes?) and study.has_genotypes?
            - donors = study.genotyped_samples
            %dt Genotyped donors
            %dd= donors.list_link :length, "Genotyped donors in #{ study }"

          - if study.respond_to?(:has_cnv?) and study.has_cnv?
            - donors = study.donors.select{|s| s.has_cnv? }
            %dt CNV donors
            %dd= donors.list_link :length, "CNV donors in #{ study }"

          - if study.respond_to?(:has_sv?) and study.has_sv?
            - donors = study.donors.select{|s| s.has_sv? }
            %dt SV donors
            %dd= donors.list_link :length, "SV donors in #{ study }"


      - if study.respond_to?(:matrices) and study.matrices.any?
        .ui.header
          Matrices
        
        .ui.content
          %dl
            - study.matrices.each do |matrix|
              %dt #{matrix} donors
              %dd
                - if study.matrix(matrix).samples
                  = fragment do
                    = Sample.setup(study.matrix(matrix).samples.dup, study).list_link :length, "Donors in #{study} matrix #{matrix}"
                - else
                  0
    .column
      .ui.header
        Mutation density
      .ui.content
        - mutation_histogram = TSV.setup({}, :key_field => 'label', :fields => ['value'], :type => :single, :cast => :to_i)
        - study.donors.sort_by{|d|d.num_genomic_mutations}.each do |donor|
          - mutation_histogram[donor] = donor.num_genomic_mutations
        - mutation_counts = mutation_histogram.values.flatten
        - bins = 10
        - min = mutation_counts.min
        - max = mutation_counts.max
        - range = max-min
        - bin_size = range / bins
        - mutation_bin_donors = TSV.setup({}, :key_field => "label", :fields => ["value"], :type => :single, :cast => :to_i)
        - mutation_histogram.through do |donor, counts|
          - bin = (counts - min) / bin_size
          - bin_name = [min + bin*bin_size, min + (bin+1)*bin_size].collect{|n| n < 1000 ? n.to_s : (n/1000).to_s + 'K'}
          - bin_name = bin_name * ".."
          - mutation_bin_donors[bin_name] ||= 0
          - mutation_bin_donors[bin_name] += 1

        = tool :nvd3, :plot => 'histogram', :values => mutation_bin_donors, :height => '15em', :width => '100%', :x_label => 'Num. Mutations', :y_label => 'Number of donors'

    - if study.has_drivers? 
      .column
        .ui.header
          Integrated driver calls
        .ui.content
          %dl
            - types = %w(CDS 3UTR  5UTR enhancer promCore)
            - types.each do |type|
              %dt #{type} drivers
              %dd= study.drivers(type).list_link :length, "#{ type } consensus drivers for #{ entity }"
- if study.has_drivers? 
  - entity_card.add_section "Driver network" do
    - driver_by_type = TSV.setup({}, :fields => ["Ensembl Gene ID"], :key_field => "Driver type", :type => :flat)
    - all_drivers = Set.new
    - types = %w(CDS 3UTR  5UTR promCore)
    - types.each do |type|
      - driver_by_type[type] ||= []
      - driver_by_type[type] += study.drivers(type)
      - all_drivers += driver_by_type[type]

    = graph do |kb|
      - add_entities Gene.setup(all_drivers.to_a, "Ensembl Gene ID", PCAWG.organism)

-# if entity.has_genotypes?
  - entity_card.add_section "Mutations and Genes" do

    %table.ui.collapsing.table
      %tbody
        %tr
          %td All Mutations
          %td= study.num_genomic_mutations

        %tr
          %td Affected genes
          %td= entity.get_genes(:affected).list_link :length, "Affected genes in #{ entity }"

        %tr
          %td Damaged genes
          %td= entity.get_genes(:damaged_mutated_isoform).list_link :length, "Damaged genes in #{ entity }"

        %tr
          %td Broken genes 
          %td= entity.get_genes(:broken).list_link :length, "Broken genes in #{ entity }"

        %tr
          %td Recurrent genes
          %td= entity.get_genes(:recurrent).list_link :length, "Recurrent genes in #{ entity }"


  - if study.has_drivers? 
    - entity_card.add_section "Drivers" do
      %table.ui.collapsing.table
        %tbody
          - types = %w(CDS 3UTR  5UTR enhancer promCore)
          - types.each do |type|
            %tr
              %td #{type} drivers
              %td= study.drivers(type).list_link :length, "#{ type } consensus drivers for #{ entity }"

  - entity_card.add_section "Gene status by sample" do
    = fragment do
      = table :row_ids => :consume do
        - matches = study.knowledge_base.subset(:sample_genes, :all)
        - tsv = matches.tsv
        - tsv = tsv.slice(tsv.fields - %w(overlapping))
        - tsv


- entity_card.action_controller = default_action_controller entity

= entity_card_render entity_card


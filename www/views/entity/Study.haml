- require 'rbbt/rest/common/tabs'
- study = entity

- entity_card = EntityCard.new(study)
- entity_card.name = study
- entity_card.long_name = ""

- entity_card.add_section "Overview" do
  .ui.stackable.grid
    .row
      .six.wide.column
        .ui.header
          Donors
        
        .ui.content
          %dl
            %dt Registered donors 
            %dd= study.donors.list_link :length, "Donors in #{ study }"

            - if study.respond_to?(:has_genotypes?) and study.has_genotypes?
              - donors = study.genotyped_samples
              %dt Genotyped donors
              %dd= donors.list_link :length, "Genotyped donors in #{ study }"

            - if study.respond_to?(:has_cnv?) and study.has_cnv?
              - donors = study.donors.select{|s| s.has_cnv? }
              %dt CNV donors
              %dd= donors.list_link :length, "CNV donors in #{ study }"

            - if study.respond_to?(:has_sv?) and study.has_sv?
              - donors = study.donors.select{|s| s.has_sv? }
              %dt SV donors
              %dd= donors.list_link :length, "SV donors in #{ study }"


        - if study.respond_to?(:matrices) and study.matrices.any?
          .ui.header
            Matrices
          
          .ui.content
            %dl
              - study.matrices.each do |matrix|
                %dt #{matrix} donors
                %dd
                  - if study.matrix(matrix).samples
                    = fragment do
                      = Sample.setup(study.matrix(matrix).samples.dup, study).list_link :length, "Donors in #{study} matrix #{matrix}"
                  - else
                    0
      .ten.wide.column
        .ui.header
          Mutation density
        .ui.content
          - mutation_histogram = TSV.setup({}, :key_field => 'label', :fields => ['value'], :type => :single, :cast => :to_i)
          - study.donors.sort_by{|d|d.num_genomic_mutations}.each do |donor|
            - mutation_histogram[donor] = donor.num_genomic_mutations
          - mutation_counts = mutation_histogram.values.flatten
          - bins = 10
          - min = mutation_counts.min
          - max = mutation_counts.max
          - range = max-min
          - bin_size = range / bins
          - mutation_bin_donors = TSV.setup({}, :key_field => "label", :fields => ["value"], :type => :single, :cast => :to_i)
          - mutation_histogram.through do |donor, counts|
            - bin = (counts - min) / bin_size
            - bin_name = [min + bin*bin_size, min + (bin+1)*bin_size].collect{|n| n < 1000 ? n.to_s : (n/1000).to_s + 'K'}
            - bin_name = bin_name * ".."
            - mutation_bin_donors[bin_name] ||= 0
            - mutation_bin_donors[bin_name] += 1

          = tool :nvd3, :plot => 'histogram', :values => mutation_bin_donors, :height => '15em', :width => '100%', :x_label => 'Num. Mutations', :y_label => 'Number of donors'

- if study.has_drivers? 
  - entity_card.add_section "Cohort drivers" do
    .ui.stackable.grid
      .six.wide.column
        .ui.header
          Candidate drivers
        .ui.content
          - list_container = ListContainer.new
          - types = %w(CDS 3UTR  5UTR enhancer Promoter)
          - types.each do |type|
            - drivers = study.candidate_drivers(type)
            - list_container.add "#{type} candidate drivers for #{entity}", drivers 
      
          = list_container_render(list_container)

      .ten.wide.column
        = partial_render('partials/candidate_driver_incidence', :study => study)

    - donors = study.genotyped_samples
    - study_meta = PCAWG.donor_meta_cohort.tsv.values_at(*donors).compact.flatten.uniq
    - study_meta.each do |meta_name|
      - meta = Study.setup("meta=" << meta_name)
      .ui.stackable.grid
        .six.wide.column
          .ui.header
            Candidate drivers in meta cohort #{meta_name}
          .ui.content
            - list_container = ListContainer.new
            - types = %w(CDS 3UTR  5UTR enhancer Promoter)
            - types.each do |type|
              - drivers = meta.candidate_drivers(type)
              - list_container.add "#{type} candidate drivers for #{meta} in #{entity}", drivers 
        
            = list_container_render(list_container)

        .ten.wide.column
          = partial_render('partials/candidate_driver_incidence', :study => meta, :donors => donors)

    .ui.stackable.grid
      .six.wide.column
        .ui.header
          Integrated driver calls (p-value < 0.01)
        .ui.content
          - list_container = ListContainer.new
          - types = %w(CDS 3UTR  5UTR enhancer promCore)
          - types.each do |type|
            - drivers = study.drivers(type,0.01, false)
            - drivers.each{|d| d.sub!(/^chr/,'') } if type == 'enhancer'
            - list_container.add "#{type} consensus drivers for #{entity} (p-value < 0.01)", drivers 
      
          = list_container_render(list_container)

      .ten.wide.column
        = partial_render('partials/driver_incidence', :study => study, :pvalues => true)
    .ui.stackable.grid
      .six.wide.column
        .ui.header
          Integrated driver calls (q-value < 0.1)
        .ui.content
          - list_container = ListContainer.new
          - types = %w(CDS 3UTR  5UTR enhancer promCore)
          - types.each do |type|
            - drivers = study.drivers(type,0.1, true)
            - drivers.each{|d| d.sub!(/^chr/,'') } if type == 'enhancer'
            - list_container.add "#{type} consensus drivers for #{entity} (q-value < 0.1)", drivers 
      
          = list_container_render(list_container)
      .ten.wide.column
        = partial_render('partials/driver_incidence', :study => study)

  

- entity_card.add_section "Sample drivers" do
  - donor_drivers = PCAWG.donor_drivers.tsv(:merge => true, :type => :flat, :fields => ["Associated Gene Name"]).swap_id "Associated Gene Name", "Ensembl Gene ID"
  - Log.tsv donor_drivers

  = graph do |kb|
    - kb.entity_options = {"Sample" => {:cohort => study}}
    - kb.register "donor_drivers", PCAWG.donor_drivers, :target => "Associated Gene Name=>Ensembl Gene ID"
    - assocs = kb.subset("donor_drivers", :source => study.donors, :target => :all)
    - add_associations assocs

- entity_card.action_controller = default_action_controller entity

= entity_card_render entity_card


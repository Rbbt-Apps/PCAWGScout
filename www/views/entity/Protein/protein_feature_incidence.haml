- organism = PCAWG.organism
- name = entity.name || entity

- gene = entity.gene
- incidence = Study.setup("PCAWG").mi_incidence(:job).produce.path.tsv :grep => entity

- mutation_isoform_info = incidence
- mutation_isoform_info.add_field "Change" do |k,v|
  - k.split(":").last.scan(/\d+/)[0]

- databases = Structure::ANNOTATORS.keys
- database_feature_counts = {}
- feature_locations = {}
- databases.each do |database|
  - next if database == "COSMIC"
  - annotator = Structure::ANNOTATORS[database]

  - feature_counts = Hash.new(0)
  - feature_pos = nil
  - location_pos = nil

  - annotator.fields.each_with_index do |f,i|
    - feature_pos ||= i if f =~ /description|ID/i
    - location_pos ||= i if f =~ /location|range/i

  - mutation_isoform_info = mutation_isoform_info.add_fields annotator.fields do |k,v|
    - new = [[]] * annotator.fields.length

    - samples = v[0].length
    - v[1].each do |c|
      - residue = c.match(/(\d+)/)[1].to_i
      - values = annotator.annotate(entity, residue, organism)
      - next if values.nil?
      - seen = []
      - if location_pos
        - Misc.zip_fields(values.values_at(feature_pos, location_pos)).each do |entry|
          - feature, location = entry
          - next if feature.nil? or feature.empty? or seen.include? feature
          - seen << feature
          - feature_counts[feature] += samples
          - feature_locations[feature] ||= location.split(":").collect{|p| p.to_i}
      - values.each_with_index do |v,i|
        - new[i] += v
    - new.compact!
    - new

  - database_feature_counts[database] = feature_counts


- feature_counts = {}
- database_feature_counts.each{|d,c| feature_counts.merge!(c)}
  
- all_sample_hits = mutation_isoform_info.column("Sample").values.flatten
- num_samples = all_sample_hits.uniq.length.to_f
- aas = entity.sequence.length.to_f * num_samples
- global_frequency = all_sample_hits.length.to_f / aas
- TSV.setup(feature_counts, :key_field => "Feature", :fields => ["Counts"], :type => :single, :namespace => organism)
- header "Binomial Significance", NumericValue

- all_mis = incidence.keys
.responsive_flexible_columns
  = table :page => "1~Binomial Significance", :table_id => "Most affected features in PCAWG for #{ name }" do
    - tsv = feature_counts.to_list.add_field "Binomial Significance" do |feature,v|
      - counts = v["Counts"]
      - location = feature_locations[feature]
      - size = location.last - location.first + 1
      - R.eval("binom.test(#{counts}, #{size * num_samples}, #{ global_frequency }, 'greater')$p.value")

    - tsv = tsv.add_field "Location" do |feature,v|
      - feature_locations[feature] * ":"

    - tsv = tsv.add_field "Size" do |feature,v|
      - location = feature_locations[feature]
      - size = location.last - location.first + 1
      - size.to_s

    - tsv = tsv.add_field "Description" do |feature,v|
      - case
      - when feature =~ /^IPR\d/
        - feature = InterProDomain.setup(feature.dup, organism) 
        - feature.link
      - when (defined? PfamDomain and feature =~ /^PF\d/)
        - feature = PfamDomain.setup(feature.dup, organism) 
        - feature.link
      - else
        - ""

    - tsv

  = fragment do
    - interfaces = Structure.job(:mi_interfaces, nil, :mutated_isoforms => all_mis, :organism => organism, :watson => false, :principal => true).run

    - header "Partner protein", "Protein"
    = table :table_id => "Affected #{name} PPIs from PCAWG mutations" do
      - counts = Misc.counts(interfaces.column("Partner Ensembl Protein ID").values.collect{|v| v.uniq }.flatten)
      - TSV.setup(counts, :key_field => "Partner protein", :fields => ["Counts"], :type => :single, :namespace => organism)

-#
  - association_items = PCAWG.knowledge_base.subset(:mutation_protein_changes, :target => [entity], :source => :all)
  - mutation_isoform_info = association_items.tsv.to_double

  - log :sample_mutations
  - sample_mutations = PCAWG.knowledge_base.get_database(:sample_mutations, :type => :double, :merge => true, :target => "Sample name=~Sample", :source => "Genomic Mutation")
  - sample_mutations.fields = ["PCAWG Sample"]

  - mutation_isoform_info = mutation_isoform_info.attach(sample_mutations)
  - mutation_isoform_info = mutation_isoform_info.attach(Structure.PCAWG_mutation_annotations, :fields => ["Primary site", "Site subtype 1", "Site subtype 2", "Site subtype 3", "Primary histology", "Histology subtype 1", "Histology subtype 2", "Histology subtype 3"])

  - databases = Structure::ANNOTATORS.keys
  - database_feature_counts = {}
  - feature_locations = {}
  - databases.each do |database|
    - next if database == "PCAWG"
    - annotator = Structure::ANNOTATORS[database]

    - feature_counts = Hash.new(0)
    - feature_pos = nil
    - location_pos = nil

    - annotator.fields.each_with_index do |f,i|
      - feature_pos ||= i if f =~ /description|ID/i
      - location_pos ||= i if f =~ /location|range/i

    - mutation_isoform_info = mutation_isoform_info.add_fields annotator.fields do |k,v|
      - new = [[]] * annotator.fields.length
      - samples = v["PCAWG Sample"].length
      - v["Change"].each do |c|
        - residue = c.match(/(\d+)/)[1].to_i
        - values = annotator.annotate(entity, residue, organism)
        - next if values.nil?
        - seen = []
        - if location_pos
          - Misc.zip_fields(values.values_at(feature_pos, location_pos)).each do |entry|
            - feature, location = entry
            - next if feature.nil? or feature.empty? or seen.include? feature
            - seen << feature
            - feature_counts[feature] += samples
            - feature_locations[feature] ||= location.split(":").collect{|p| p.to_i}
        - values.each_with_index do |v,i|
          - new[i] += v
      - new.compact!
      - new

    - database_feature_counts[database] = feature_counts

  - feature_counts = {}
  - database_feature_counts.each{|d,c| feature_counts.merge!(c)}
    
  - all_sample_hits = mutation_isoform_info.column("PCAWG Sample").values.flatten
  - num_samples = all_sample_hits.uniq.length.to_f
  - aas = entity.sequence.length.to_f * num_samples
  - global_frequency = all_sample_hits.length.to_f / aas
  - TSV.setup(feature_counts, :key_field => "Feature", :fields => ["Counts"], :type => :single, :namespace => organism)
  - header "Binomial Significance", NumericValue

  .responsive_flexible_columns
    = table :page => "1~Binomial Significance", :table_id => "Most affected features in PCAWG for #{ name }" do
      - tsv = feature_counts.to_list.add_field "Binomial Significance" do |feature,v|
        - counts = v["Counts"]
        - location = feature_locations[feature]
        - size = location.last - location.first + 1
        - R.eval("binom.test(#{counts}, #{size * num_samples}, #{ global_frequency }, 'greater')$p.value")

      - tsv = tsv.add_field "Location" do |feature,v|
        - feature_locations[feature] * ":"

      - tsv = tsv.add_field "Size" do |feature,v|
        - location = feature_locations[feature]
        - size = location.last - location.first + 1
        - size.to_s

      - tsv = tsv.add_field "Description" do |feature,v|
        - case
        - when feature =~ /^IPR\d/
          - feature = InterProDomain.setup(feature.dup, organism) 
          - feature.link
        - when (defined? PfamDomain and feature =~ /^PF\d/)
          - feature = PfamDomain.setup(feature.dup, organism) 
          - feature.link
        - else
          - ""

      - tsv

    = fragment do
      - interfaces = Structure.job(:interfaces, nil, :mutations => all_mis, :organism => organism, :watson => false, :principal => true).run
      - header "Partner protein", "Protein"
      = table :table_id => "Affected #{name} PPIs from PCAWG mutations" do
        - counts = Misc.counts(interfaces.column("Ensembl Protein ID").values.collect{|v| v.uniq }.flatten)
        - TSV.setup(counts, :key_field => "Partner protein", :fields => ["Counts"], :type => :single, :namespace => organism)

